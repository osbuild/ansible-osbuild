pipeline {
    agent none

    options {
        ansiColor('xterm')
        // parallelsAlwaysFailFast()
        timestamps()
    }

    stages {
        stage("Test") {
            parallel {

                stage('Fedora 31') {
                    agent { label "fedora31" }
                    stages {

                        stage('Build') {
                            steps {
                                sh "ansible-playbook -i localhost, -e ansible_connection=local tools/mock_build.yml"
                            }
                        }

                        stage('Deploy') {
                            environment {
                                EXTRA_VARS = "-e install_source=os"
                            }
                            steps {
                                run_tests()
                            }
                            post {
                                always {
                                    preserve_logs('fedora31-mock')
                                }
                            }
                        }
                    }
                }

                stage('Fedora 32 (os)') {
                    agent { label "fedora32" }
                    environment {
                        EXTRA_VARS = "-e install_source=os"
                    }
                    steps {
                        run_tests()
                    }
                    post {
                        always {
                            preserve_logs('fedora32-os')
                        }
                    }
                }

                stage('RHEL 8.2 (mock)') {
                    agent { label "rhel82" }
                    steps {
                        run_tests()
                    }
                    post {
                        always {
                            preserve_logs('rhel82-mock')
                        }
                    }
                }

            }
        }
    }
}

// Set up a function to hold the steps needed to run the tests so we don't
// need to copy/paste the same lines over and over above.
void run_tests() {

    // Run the tests from the repository.
    sh "schutzbot/run_tests.sh"

}

// Move logs to a unique location and tell Jenkins to capture them on success
// or failure.
void preserve_logs(test_slug) {

    // Make a directory for the log files and move the logs there.
    sh "mkdir ${test_slug} && mv *.log ${test_slug}/ || true"

    // Artifact the logs.
    archiveArtifacts (
        allowEmptyArchive: true,
        artifacts: "${test_slug}/*.log"
    )

}