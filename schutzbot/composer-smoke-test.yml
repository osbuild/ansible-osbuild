---

- name: Run post-deployment smoke tests
  hosts: localhost
  become: yes
  vars:
    compose_types:
      # qcow2: {}
      ami:
        image_key: "ansible-osbuild-smoke-test-{{ ansible_hostname | to_uuid }}"
        upload_profile: /tmp/aws.toml
    passed_tests: []
    failed_tests: []
  tasks:

    - name: Install packages to boot the image
      dnf:
        name:
          - htop
          - libvirt
          - libvirt-client
          - libvirt-daemon
          - libvirt-daemon-config-network
          - libvirt-daemon-config-nwfilter
          - libvirt-daemon-driver-interface
          - libvirt-daemon-driver-network
          - libvirt-daemon-driver-nodedev
          - libvirt-daemon-driver-nwfilter
          - libvirt-daemon-driver-qemu
          - libvirt-daemon-driver-secret
          - libvirt-daemon-driver-storage
          - libvirt-daemon-driver-storage-disk
          - libvirt-daemon-kvm
          - qemu-img
          - qemu-kvm
          - virt-install
        state: present
      async: 600
      poll: 0
      register: dnf_install

    - name: Write the AWS TOML file
      copy:
        dest: /tmp/aws.toml
        content: |
          provider = "aws"

          [settings]
          accessKeyID = "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
          secretAccessKey = "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
          bucket = "{{ lookup('env', 'AWS_BUCKET') }}"
          region = "{{ lookup('env', 'AWS_REGION') }}"
          key = "{{ compose_types.ami.image_key }}"

    - name: Deploy custom repositories that use internal mirrors
      copy:
        src: "repositories/{{ item }}"
        dest: /usr/share/osbuild-composer/repositories/
      loop:
        - fedora-31.json
        - fedora-32.json

    - name: Stop osbuild-composer if it is running
      systemd:
        name: osbuild-composer.service
        state: stopped

    - name: Write a simple blueprint with only bash inside
      copy:
        dest: /tmp/blueprint.toml
        content: |
          name = "bash"
          description = "A base system with bash"
          version = "0.0.1"

          [[packages]]
          name = "bash"

          [customizations.services]
          enabled = ["sshd", "cloud-init", "cloud-init-local", "cloud-config", "cloud-final"]

    - name: Push the blueprint into osbuild-composer
      command: composer-cli blueprints push /tmp/blueprint.toml

    - name: Start the composes
      command: composer-cli --json compose start bash {{ item.key }} {{ item.value.image_key | default('') }} {{ item.value.upload_profile | default('') }}
      register: compose_start
      loop: "{{ compose_types | dict2items }}"

    - name: Ensure virtualization packages have finished installing.
      async_status:
        jid: "{{ dnf_install.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 120
      delay: 5

      # Prepare a cloud-init ISO.
    - include_tasks: smoke-test/prepare-cloud-init.yml

    - name: Get a list of the composes we started
      command: composer-cli --json compose status
      register: compose_list

      # Boot each image.
    - include_tasks: "smoke-test/boot-image-{{ compose.compose_type }}.yml"
      loop: "{{ compose_list.stdout | from_json }}"
      loop_control:
        loop_var: compose

