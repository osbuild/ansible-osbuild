---

- name: Enable fastestmirror on Fedora
  ini_file:
    path: /etc/dnf/dnf.conf
    section: main
    option: fastestmirror
    value: "1"
  when:
    - ansible_distribution == 'Fedora'

- name: Disable install_weak_deps on Fedora
  ini_file:
    path: /etc/dnf/dnf.conf
    section: main
    option: install_weak_deps
    value: "0"
  when:
    - ansible_distribution == 'Fedora'

- name: Ensure all packages are updated
  package:
    name: "*"
    state: latest
  register: package_updates
  until: package_updates is success
  retries: 5
  when: update_all_packages

- name: Install required packages
  package:
    name: "{{ required_packages }}"
  register: package_install
  until: package_install is success
  retries: 5
  tags:
    - always

- name: Set global gitconfig parameters
  git_config:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    scope: global
  loop:
    - name: user.name
      value: "Integration Testing"
    - name: user.email
      value: "nobody@redhat.com"

- name: Ensure the repos directory is clean
  file:
    path: "{{ git_repo_dir }}"
    state: "{{ item }}"
  loop:
    - absent
    - directory

- name: Clone osbuild from GitHub
  git:
    repo: "{{ osbuild_repo }}"
    dest: "{{ git_repo_dir }}/osbuild"
    version: "{{ osbuild_version }}"
    refspec: "{{ osbuild_ref }}"
    force: yes
    clone: yes
    update: yes
    track_submodules: no

- name: Clone osbuild-composer from GitHub
  git:
    repo: "{{ osbuild_composer_repo }}"
    dest: "{{ git_repo_dir }}/osbuild-composer"
    version: "{{ osbuild_composer_version }}"
    refspec: "{{ osbuild_composer_ref }}"
    force: yes
    clone: yes
    update: yes
    track_submodules: no

- name: Clone cockpit-composer from GitHub
  git:
    repo: "{{ cockpit_composer_repo }}"
    dest: "{{ git_repo_dir }}/cockpit-composer"
    version: "{{ cockpit_composer_version }}"
    refspec: "{{ cockpit_composer_ref }}"
    force: yes
    clone: yes
    update: yes
    track_submodules: no
  when: install_cockpit_composer_from_git

- name: Install build dependencies
  command: |
    dnf -y builddep \
      {{ git_repo_dir }}/osbuild-composer/osbuild-composer.spec \
      {{ git_repo_dir }}/osbuild/osbuild.spec
  args:
    warn: no
  register: composer_builddep
  until: composer_builddep is success
  retries: 5
  changed_when: "'Nothing to do' in composer_builddep.stdout"

- name: Build RPMs
  command: make -C "{{ item.dir }}" rpm
  args:
    chdir: "{{ item.dir }}"
  loop:
    - project: osbuild
      dir: "{{ git_repo_dir }}/osbuild"
      enabled: yes
    - project: osbuild-composer
      dir: "{{ git_repo_dir }}/osbuild-composer"
      enabled: yes
    - project: cockpit-composer
      dir: "{{ git_repo_dir }}/cockpit-composer"
      enabled: "{{ install_cockpit_composer_from_git }}"
  loop_control:
    label: "{{ item.project }}"
  when: item.enabled
  register: rpm_build
  async: 300
  poll: 15
  changed_when: true

- name: Wait for builds to finish
  async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ rpm_build.results }}"
  loop_control:
    loop_var: async_result_item
    label: "{{ async_result_item.item.project }}"
  when: async_result_item.item.enabled
  register: async_poll_results
  until: async_poll_results.finished
  retries: 40
  delay: 15

- name: Get a list of RPMs built for osbuild
  command: "find {{ git_repo_dir }}/osbuild/rpmbuild/RPMS/ -name '*.rpm'"
  register: osbuild_packages
  changed_when: false

- name: Get a list of RPMs built for osbuild-composer
  command: "find {{ git_repo_dir }}/osbuild-composer/rpmbuild/RPMS/ -name '*.rpm'"
  register: composer_packages
  changed_when: false

- name: Get a list of RPMs built for cockpit-composer
  command: "find {{ git_repo_dir }}/cockpit-composer/ -name '*.rpm'"
  register: cockpit_packages
  changed_when: false
  when: install_cockpit_composer_from_git

- name: Gather a list of currently installed packages
  package_facts:
    manager: rpm

- name: Disable services (allowed to fail)
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  loop:
    - cockpit.socket
    - osbuild-composer.socket
    - osbuild-rcm.socket
    - osbuild-composer.service
  ignore_errors: yes

- name: Remove the currently installed packages (allowed to fail)
  package:
    name:
      - "osbuild-composer*"
      - "osbuild*"
      - "python3-osbuild"
    state: absent
  ignore_errors: yes

- name: Clean up the previous osbuild-composer directories
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /var/lib/osbuild-composer
    - /var/cache/osbuild-composer
  when:
    - cleanup_composer_directories | bool

- name: Assemble a list of packages to install
  set_fact:
    packages_to_install: "{{ composer_packages.stdout_lines + osbuild_packages.stdout_lines + (cockpit_packages.stdout_lines | default([])) }}"

- name: List packages to be installed
  debug:
    var: packages_to_install

- name: Install RPMs with dnf
  package:
    name: "{{ packages_to_install }}"
    state: latest
  changed_when: true

- name: Force install the RPMs to work around versioning issues
  command: "rpm -Uvh --force {{ packages_to_install | join(' ') }}"
  args:
    warn: no
  changed_when: true

- name: Enable services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - osbuild-rcm.socket
    - osbuild-composer.socket
    - cockpit.socket
